"""updatae fields in patient table

Revision ID: b419d172e05d
Revises: ea3b36ba6c12
Create Date: 2025-06-26 17:24:52.891593

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'b419d172e05d'
down_revision = 'ea3b36ba6c12'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('patients', schema=None) as batch_op:
        # Added postgresql_using to explicitly convert string values to boolean.
        # This assumes existing 'reckless_spending' values are 'Yes' or 'No'.
        # 'Yes' will become TRUE, 'No' will become FALSE, any other value will become NULL.
        batch_op.alter_column('reckless_spending',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.Boolean(),
               existing_nullable=True,
               postgresql_using="CASE WHEN reckless_spending = 'Yes' THEN TRUE WHEN reckless_spending = 'No' THEN FALSE ELSE NULL END")

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('patients', schema=None) as batch_op:
        # When downgrading, we revert the type, but do not need a 'using' clause
        # unless you also want to convert boolean back to specific strings.
        # For simplicity, we are just reverting the type here.
        batch_op.alter_column('reckless_spending',
               existing_type=sa.Boolean(),
               type_=sa.VARCHAR(length=100),
               existing_nullable=True)

    # ### end Alembic commands ###
